/*
 * Copyright (C) 2018 - 2022 Xilinx, Inc. All rights reserved.
 * Copyright (C) 2022 - 2024 Advanced Micro Devices, Inc.  All rights reserved
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 */

/** Connection handle for a UDP Server session */

#include "udp_perf_server.h"
#include <xil_printf.h>
#include "xil_cache.h"
#include "xaxidma.h"
#include "xdebug.h"
#include "xparameters.h"

extern struct netif server_netif;
static struct udp_pcb *pcb;
static struct perf_stats server;
/* Report interval in ms */
#define REPORT_INTERVAL_TIME (INTERIM_REPORT_INTERVAL * 20)


#define NUM_DMA_WORDS 200
#define DMA_BUF_SIZE_BYTES (NUM_DMA_WORDS * sizeof(u64))
static u64 dma_buffer[NUM_DMA_WORDS];  // 8-byte aligned by default
//static u64 dma_buffer[NUM_DMA_WORDS] __attribute__((aligned(64)));
//#define DMA_BUF_BASE_ADDR 0x20000000  // Example: Check your linker or reserved memory
//u64 *dma_buffer = (u64 *)DMA_BUF_BASE_ADDR;


XAxiDma AxiDma;

void print_app_header(void)
{
	xil_printf("UDP server listening on port %d\r\n",
			UDP_CONN_PORT);
	xil_printf("On Host: Run $iperf -c %s -i %d -t 300 -u -b <bandwidth>\r\n",
			inet_ntoa(server_netif.ip_addr),
			INTERIM_REPORT_INTERVAL);

}

static void print_udp_conn_stats(void)
{
	xil_printf("[%3d] local %s port %d connected with ",
			server.client_id, inet_ntoa(server_netif.ip_addr),
			UDP_CONN_PORT);
	xil_printf("%s port %d\r\n", inet_ntoa(pcb->remote_ip),
			pcb->remote_port);
	xil_printf("[ ID] Interval\t     Transfer     Bandwidth\t");
	xil_printf("    Lost/Total Datagrams\n\r");
}

static void stats_buffer(char* outString,
		double data, enum measure_t type)
{
	int conv = KCONV_UNIT;
	const char *format;
	double unit = 1024.0;

	if (type == SPEED)
		unit = 1000.0;

	while (data >= unit && conv <= KCONV_GIGA) {
		data /= unit;
		conv++;
	}

	/* Fit data in 4 places */
	if (data < 9.995) { /* 9.995 rounded to 10.0 */
		format = "%4.2f %c"; /* #.## */
	} else if (data < 99.95) { /* 99.95 rounded to 100 */
		format = "%4.1f %c"; /* ##.# */
	} else {
		format = "%4.0f %c"; /* #### */
	}
	sprintf(outString, format, data, kLabel[conv]);
}


/** The report function of a TCP server session */
static void udp_conn_report(u64_t diff,
		enum report_type report_type)
{
	u64_t total_len, cnt_datagrams, cnt_dropped_datagrams, total_packets;
	u32_t cnt_out_of_order_datagrams;
	double duration, bandwidth = 0;
	char data[16], perf[16], time[64], drop[64];

	if (report_type == INTER_REPORT) {
		total_len = server.i_report.total_bytes;
		cnt_datagrams = server.i_report.cnt_datagrams;
		cnt_dropped_datagrams = server.i_report.cnt_dropped_datagrams;
	} else {
		server.i_report.last_report_time = 0;
		total_len = server.total_bytes;
		cnt_datagrams = server.cnt_datagrams;
		cnt_dropped_datagrams = server.cnt_dropped_datagrams;
		cnt_out_of_order_datagrams = server.cnt_out_of_order_datagrams;
	}

	total_packets = cnt_datagrams + cnt_dropped_datagrams;
	/* Converting duration from milliseconds to secs,
	 * and bandwidth to bits/sec .
	 */
	duration = diff / 20.0; /* secs */
	if (duration)
		bandwidth = (total_len / duration) * 8.0;

	stats_buffer(data, total_len, BYTES);
	stats_buffer(perf, bandwidth, SPEED);
	/* On 32-bit platforms, xil_printf is not able to print
	 * u64_t values, so converting these values in strings and
	 * displaying results
	 */
	sprintf(time, "%4.1f-%4.1f sec",
			(double)server.i_report.last_report_time,
			(double)(server.i_report.last_report_time + duration));
	sprintf(drop, "%4llu/%5llu (%.2g%%)", cnt_dropped_datagrams,
			total_packets,
			(100.0 * cnt_dropped_datagrams)/total_packets);
	xil_printf("[%3d] %s  %sBytes  %sbits/sec  %s\n\r", server.client_id,
			time, data, perf, drop);

	if (report_type == INTER_REPORT) {
		server.i_report.last_report_time += duration;
	} else if ((report_type != INTER_REPORT) && cnt_out_of_order_datagrams) {
		xil_printf("[%3d] %s  %u datagrams received out-of-order\n\r",
				server.client_id, time,
				cnt_out_of_order_datagrams);
	}
}


static void reset_stats(void)
{
	server.client_id++;
	/* Save start time */
	server.start_time = get_time_ms();
	server.end_time = 0; /* ms */
	server.total_bytes = 0;
	server.cnt_datagrams = 0;
	server.cnt_dropped_datagrams = 0;
	server.cnt_out_of_order_datagrams = 0;
	server.expected_datagram_id = 0;

	/* Initialize Interim report parameters */
	server.i_report.start_time = 0;
	server.i_report.total_bytes = 0;
	server.i_report.cnt_datagrams = 0;
	server.i_report.cnt_dropped_datagrams = 0;
	server.i_report.last_report_time = 0;
}

int init_dma_adg() {
  	XAxiDma_Config *CfgPtr;
  	int Status;

	/* Initialize the XAxiDma device.
	 */
	CfgPtr = XAxiDma_LookupConfig(XPAR_XAXIDMA_0_BASEADDR);
	if (!CfgPtr) {
		xil_printf("No config found for %d\r\n", XPAR_XAXIDMA_0_BASEADDR);
	}

  	Status = XAxiDma_CfgInitialize(&AxiDma, CfgPtr);
  	if (Status != XST_SUCCESS) {
  	  xil_printf("DMA init failed: %d\r\n", Status);
  	  return Status;
  	}

  	// Disable interrupts if polling
  	XAxiDma_IntrDisable(&AxiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
  	XAxiDma_IntrDisable(&AxiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);

  	return XST_SUCCESS;
}


void start_my_dma(u32 len) 
{
	int Status;
	
	//u64 *TxBufferPtr;
	//TxBufferPtr = (u64 *)dma_buffer ;

	Xil_DCacheFlushRange((UINTPTR)dma_buffer, len);
	Status = XAxiDma_SimpleTransfer(&AxiDma, (UINTPTR)dma_buffer, len, XAXIDMA_DMA_TO_DEVICE);
	return;
}


/** Receive data on a udp session */
static void udp_recv_perf_traffic(void *arg, struct udp_pcb *tpcb,
		struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
	static u8_t first = 1;
	static u64_t now;
	u32_t drop_datagrams = 0;
	s32_t recv_id;

	//recv_id = ntohl(*((int *)(p->payload)));

	//xil_printf("p->payload address = 0x%08X\n\r", (unsigned int)p->payload);
	//xil_printf("p->len = %x\n\r",p->len);

	//xil_printf("p->payload addr: 0x%08X, len = %d\n\r", (unsigned int)p->payload, p->len);
	//u8 *data = (u8 *)p->payload;
	//for (int i = 0; i < 32; ++i) {
	//  xil_printf("0x%02X ", data[i]);
	//  if ((i + 1) % 8 == 0) xil_printf("\n\r");
	//}


	memcpy(dma_buffer, p->payload, p->len);
	//memcpy((u8 *)dma_buffer, p->payload, p->len);

/*	
	int Index;
	u64 Value;
	u64 *TxBufferPtr;
	TxBufferPtr = (u64 *)DMA_BUF_BASE_ADDR ;
	Value = 0xA5CADEAD00010000;

	for (Index = 0; Index < 10; Index ++) {
		TxBufferPtr[Index] = Value;
		Value = (Value + 1) & 0xFFFFFFFFFFFFFFFF;
	}


	for (int i = 0; i < 10; ++i) {
	  xil_printf("word[%d] = 0x%016llX\n\r", i, dma_buffer[i]);
	}
	xil_printf("p->len = %d\n\r", p->len);
	xil_printf("dma_buffer addr = 0x%08X\n\r", (unsigned int)dma_buffer);
*/	
	//Xil_DCacheFlushRange((UINTPTR)dma_buffer, p->len);
	
	start_my_dma((u32)p->len);	


	//int num_words = p->len / sizeof(u64);
	//xil_printf("\n\rNum 64bit words = %d\n\r",num_words);

	//for (int i = 0; i < num_words; ++i) {
	//  u64 word = ((u64 *)p->payload)[i];
	//  // u64 word = __builtin_bswap64(word);  // Uncomment if sender used big-endian
	//  xil_printf("word[%d] = 0x%016llX\n\r", i, word);
	//}

	
	
	pbuf_free(p);
	return;
}


void start_application(void)
{
	err_t err;

	/* Create Server PCB */
	pcb = udp_new();
	if (!pcb) {
		xil_printf("UDP server: Error creating PCB. Out of Memory\r\n");
		return;
	}

	err = udp_bind(pcb, IP_ADDR_ANY, UDP_CONN_PORT);
	if (err != ERR_OK) {
		xil_printf("UDP server: Unable to bind to port");
		xil_printf(" %d: err = %d\r\n", UDP_CONN_PORT, err);
		udp_remove(pcb);
		return;
	}

	/* specify callback to use for incoming connections */
	udp_recv(pcb, udp_recv_perf_traffic, NULL);

	return;
}
